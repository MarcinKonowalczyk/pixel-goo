#!/usr/bin/env python3

# Genrate shader source to be included at compile time
#
# CMake example:
#
#   # Set shaders directory and create it at build generation time
#   set(SHADERS_DIR ${CMAKE_CURRENT_BINARY_DIR}/shaders)
#   file(MAKE_DIRECTORY ${SHADERS_DIR})
#   add_custom_command(
#       OUTPUT ${SHADERS_DIR}/velocity.hpp
#       COMMAND python3 ${CMAKE_CURRENT_SOURCE_DIR}/embed_shader.py ${CMAKE_CURRENT_SOURCE_DIR}/velocity.vert ${CMAKE_CURRENT_SOURCE_DIR}/velocity.frag ${SHADERS_DIR}/velocity.hpp
#       DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/velocity.vert ${CMAKE_CURRENT_SOURCE_DIR}/velocity.frag
#   )
#   add_custom_target( generate_velocity DEPENDS ${SHADERS_DIR}/velocity.hpp )
#   add_dependencies( main_target_name generate_velocity )
#   target_include_directories( main_target_name PUBLIC ${SHADERS_DIR} )
#
# Then the C source will include the following:
#
#   extern const GLchar* velocity_VertexShaderSource;
#   extern const GLchar* velocity_FragmentShaderSource;
#   #include "velocity.hpp"
#
# or just
#
#   #include "velocity.hpp"
#
# if you don't mind the preprocessor being confused
#

import os
import re

HEADER = """
// @{kind}@ shader source automatically generated by embed_shader.py
// Used to include shader source in C++ source at compile time
const GLchar* @{name}@_@{kind}@ShaderSource = R"(
"""

FOOTER = """
)";
"""

# Courtesy of https://stackoverflow.com/a/3305731/2531987
def sanitize(var_string):
    return re.sub("\W|^(?=\d)", "_", var_string)


def add_C_header_footer(shader, shader_name, kind, header, footer):
    header = header.replace("@{name}@", sanitize(shader_name))

    if kind == "vert":
        header = header.replace("@{kind}@", "Vertex")
    elif kind == "frag":
        header = header.replace("@{kind}@", "Fragment")
    else:
        raise NotImplementedError(f'Unknown shader kind "{kind}"')

    header = header.split("\n")
    header = [line + "\n" for line in header if line]

    # Make sure trailing newline exists
    if shader[-1][-1] != "\n":
        shader[-1] += "\n"

    footer = footer.split("\n")
    footer = [line + "\n" for line in footer if line]

    return header + shader + footer


def main(argv):

    # Last argv is the target file
    target_file = argv[-1]
    _, ext = os.path.splitext(target_file)
    if ext != ".hpp" and ext != ".h":
        raise OSError(f"Output file extension must be .h or .hpp")

    # Process all the
    hpp_source = []
    for shader_file in argv[1:-1]:
        print(f'Processing "{shader_file}"')

        with open(shader_file, "r") as f:
            shader = f.readlines()

        base, ext = os.path.splitext(shader_file)
        _, shader_name = os.path.split(base)

        hpp_source += add_C_header_footer(shader, shader_name, ext[1:], HEADER, FOOTER)
        hpp_source += "\n"

    with open(target_file, "w") as f:
        f.writelines(hpp_source)


if __name__ == "__main__":
    import sys

    main(sys.argv)
